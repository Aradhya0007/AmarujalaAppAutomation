package basetest;

import java.lang.reflect.Field;

import org.testng.ITestContext;
import org.testng.ITestListener;
import org.testng.ITestResult;

import com.aventstack.extentreports.ExtentReports;
import com.aventstack.extentreports.ExtentTest;
import com.aventstack.extentreports.Status;

import io.appium.java_client.android.AndroidDriver;

public class Listeners implements ITestListener {

    ExtentReports extent = Report.getReportObject();
    ThreadLocal<ExtentTest> extentTest = new ThreadLocal<>();

    @Override
    public void onTestStart(ITestResult result) {
        ExtentTest test = extent.createTest(result.getMethod().getMethodName(),
                "Class: " + result.getTestClass().getName());
        extentTest.set(test);
        ExtentLogger.extentTest.set(test);
    }

    @Override
    public void onTestSuccess(ITestResult result) {
        extentTest.get().log(Status.PASS, "✅ Test Passed");
    }

    
    
    @Override
    public void onTestFailure(ITestResult result) {
        Object testInstance = result.getInstance();
        AndroidDriver driver = null;

        try {
            // Traverse the class hierarchy to find the driver field
            Class<?> clazz = testInstance.getClass();
            while (clazz != null) {
                try {
                    Field driverField = clazz.getDeclaredField("driver");
                    driverField.setAccessible(true);
                    driver = (AndroidDriver) driverField.get(testInstance);
                    break;
                } catch (NoSuchFieldException e) {
                    clazz = clazz.getSuperclass(); // go to Basecode class
                }
            }

            if (driver != null) {
                ExtentLogger.logException(result.getThrowable(), driver);
            } else {
                ExtentLogger.logFail("❌ Driver not found in test class or Basecode.");
            }

        } catch (Exception e) {
            ExtentLogger.logFail("❌ Failed to access driver or capture screenshot.");
            e.printStackTrace();
        }
    }

    @Override
    public void onTestSkipped(ITestResult result) {
        extentTest.get().log(Status.SKIP, "⚠ Test Skipped: " + result.getThrowable());
    }

    @Override
    public void onFinish(ITestContext context) {
        extent.flush(); // Finalize report
    }
}
