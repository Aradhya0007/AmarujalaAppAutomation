package basetest;

import java.net.MalformedURLException;
import java.net.URL;
import java.time.Duration;
import java.util.HashMap;
import java.util.Map;
import java.util.concurrent.TimeUnit;

import org.openqa.selenium.remote.DesiredCapabilities;
import org.testng.annotations.AfterClass;
import org.testng.annotations.BeforeClass;

import io.appium.java_client.android.AndroidDriver;
import io.appium.java_client.AppiumDriver;

public class Basecode {
	public AndroidDriver driver;  // Declare driver globally

    @BeforeClass
    public void setUp() throws MalformedURLException {
        DesiredCapabilities capabilities = new DesiredCapabilities();
        Map<String, Object> ltOptions = new HashMap<>();

        // Fetch values dynamically from config.properties
        String userName = ConfigReader.getProperty("username");
        String accessKey = ConfigReader.getProperty("accessKey");
        String gridURL = ConfigReader.getProperty("gridURL");  // Ensure this does NOT contain '@'

        ltOptions.put("deviceName", ConfigReader.getProperty("deviceName"));
        ltOptions.put("platformVersion", ConfigReader.getProperty("platformVersion"));
        ltOptions.put("platformName", ConfigReader.getProperty("platformName"));
        ltOptions.put("app", ConfigReader.getProperty("app"));
        ltOptions.put("build", ConfigReader.getProperty("build"));
        ltOptions.put("name", ConfigReader.getProperty("name"));
        ltOptions.put("project", ConfigReader.getProperty("project"));
        ltOptions.put("isRealMobile", Boolean.parseBoolean(ConfigReader.getProperty("isRealMobile")));
        ltOptions.put("debug", Boolean.parseBoolean(ConfigReader.getProperty("debug")));
        ltOptions.put("console", Boolean.parseBoolean(ConfigReader.getProperty("console")));
        ltOptions.put("network", Boolean.parseBoolean(ConfigReader.getProperty("network")));

        capabilities.setCapability("lt:options", ltOptions);
        
        // Correctly format the hub URL
        String hub = "https://" + userName + ":" + accessKey + "@" + gridURL;
        driver = new AndroidDriver<>(new URL(hub), capabilities);
    
    }

    @AfterClass
    public void tearDown() {
        if (driver != null) {
            driver.quit();
        }
    }
}
